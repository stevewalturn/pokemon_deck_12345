{
  "package_name": "com.yeah_well.pokemon_deck",
  "project_description": "A Pok\u00e9mon trading card management application that enables users to search, explore, and build custom decks of Pok\u00e9mon cards. Key features include comprehensive card search with advanced filtering, detailed card information viewing, deck creation and management, and interactive card collection exploration. The app leverages the Pok\u00e9mon Trading Card Game API to provide real-time card data and supports local deck storage using SharedPreferences.",
  "architecture_overview": "Built using the Stacked architecture with a modular, feature-driven design. Utilizes dependency injection via GetIt, state management through Stacked ViewModels, and service-based architecture for separation of concerns. Implements repository pattern for data management, services for external API interactions, and follows MVVM design principles. Supports multiple environments with flavor-based configuration.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file provides an extension on the BuildContext class to make it easier to access the current AppLocalizations instance, which is responsible for managing the application's localization and internationalization.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizations",
          "description": "Retrieves the current AppLocalizations instance for the given BuildContext.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a centralized and reusable way to handle the internationalization (i18n) and localization (l10n) of the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns a list of localization delegates that provide the translation and formatting logic for the application's strings.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns a list of locales that the application supports for translation and formatting.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the Flutter application, setting up the necessary dependencies, and running the main app widget. It serves as the entry point for the application, ensuring a consistent initialization process across different app flavors.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "This is the main entry point function that initializes the application. It sets up the app's flavor, ensures the WidgetsFlutterBinding is initialized, and configures the app's orientation, locator, dialog UI, and bottom sheet UI. Finally, it runs the main app widget provided by the caller.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the production version of the application. It sets up the initial state and configuration for the app, ensuring it runs in the production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entry point of the application. It calls the `bootstrap` function to initialize the app and render the `AppView`.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the Flutter application. It sets up the application's entry point and configures the application flavor to be 'development'.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application that initializes the development build of the app.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines an enum called `Flavor` with two values: `production` and `development`. It represents the different flavors or environments that the application can run in.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality in the application. It encapsulates the implementation of analytics tracking and provides a centralized interface for managing analytics-related operations.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver class is responsible for tracking the screen views of the application using the AnalyticService. It is a NavigatorObserver that listens for navigation events and logs screen transitions to the analytics service.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + ScreenObserver()\n  + void didPush(Route<dynamic> route, Route<dynamic>? previousRoute)\n  + void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute})\n  + void didPop(Route<dynamic> route, Route<dynamic>? previousRoute)\n  - void _trackScreenView(Route<dynamic> route)\n}\n\nAnalyticService --* ScreenObserver\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a route is replaced in the navigation stack.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Logs the screen view to the AnalyticService based on the current route.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the main application view in a Flutter application. It serves as the ViewModel component in the Model-View-ViewModel (MVVM) architecture, which separates the presentation logic from the business logic.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main UI of the application's home screen. It provides a simple interface for displaying a counter value and allowing the user to interact with the screen by incrementing the counter, showing a dialog, or displaying a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including the counter display, increment button, dialog button, and bottom sheet button.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for handling the counter value and displaying it, as well as providing methods to show a custom dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This file defines the Firebase configuration options for the production environment of the application. It is responsible for providing the necessary Firebase-related settings and credentials to integrate the application with the Firebase services in the production environment.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:firebase_core/firebase_core.dart",
        "lib/config/firebase_options.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized repository for global configuration and settings, providing a consistent and easily accessible way to manage application-wide constants.",
      "class_diagram": "@startuml\n' Enumerations and Constants\npublicConstant totalOnboarding : int\npublicConstant onBoardingHeaderTag : String\npublicConstant pathCompliantStatement : String\npublicConstant pathTermsOfServices : String\npublicConstant defaultContactEmail : String\npublicConstant defaultContactPhone : String\npublicConstant introYoutubeId : String\npublicConstant defaultLanguagesList : List<Map<String, String>>\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching WhatsApp and email communication from a Flutter application. It handles the platform-specific logic to open the appropriate communication channels for the user's device.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application or the WhatsApp web interface with a pre-filled message and recipient phone number.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email application with the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The `DateUtil` class provides a set of utility functions for handling date and time data in the application, particularly when interacting with Firestore.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Extracts a `DateTime` object from a dynamic input value, which can be a `Timestamp` from Firestore, a `String` representation of a date and time, or a `DateTime` object directly.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This file defines a custom exception class `APIException` that is used to handle and propagate exceptions that occur during API service interactions. It provides a standardized way to handle and communicate errors that arise in the application's API layer.",
      "class_diagram": "@startuml\n  class APIException implements Exception {\n    -dynamic message\n    +toString(): String\n  }\n  @enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructor for the `APIException` class. Allows for the creation of a new `APIException` instance with an optional error message.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default `toString()` method to provide a string representation of the `APIException` instance, including the runtime type and the error message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a custom extension on the Flutter `Color` class, adding utility methods for converting hexadecimal color strings to `Color` objects and integer values. This extension simplifies the process of working with color-related functionality in the application, improving developer productivity and maintainability.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to an integer value representing the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines a singleton class 'Flavors' that is responsible for managing the current application flavor, which is typically used to differentiate between development, staging, and production environments. The main purpose of this class is to provide a centralized way to access and check the current application flavor, enabling the application to behave differently based on the specific environment it is running in.",
      "class_diagram": "@startuml\nclass Flavors {\n  - static Flavor? flavor\n  + static bool get isDev()\n  + static bool get isProd()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class, ensuring a singleton instance.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "Flavors.factory",
          "description": "Factory constructor for the Flavors class, returning the singleton instance.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "isDev",
          "description": "Getter that returns true if the current application flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Getter that returns true if the current application flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class is responsible for providing utility functions to handle JSON data in the application. It solves the problem of safely and consistently parsing and formatting JSON data, which is a common task in modern web and mobile applications.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  +static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n  +static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n  +static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic> by removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic JSON value to an instance of type T, or returns null if the input is invalid.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON objects to a List<T> by applying the given fromJson function to each object.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the configuration options for the Firebase service in the development environment of the application. It defines the necessary credentials and settings to initialize and interact with the Firebase platform during the development phase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "flutter_dotenv"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "Centralized localization and internationalization (i18n) configuration export file that provides standardized access to app localization resources and supported language configurations",
      "class_diagram": "@startuml\npackage Localization {\n    [app_localizations.dart]\n    [localizations_extension.dart]\n    [supported_locales.dart]\n}\n@enduml",
      "methods": [
        {
          "name": "exportLocalizations",
          "description": "Exports core localization components for unified language support across the application",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the Flutter application. It is responsible for setting up the overall application structure, including the navigation, localization, and event handling. This class serves as the foundation for the entire application, providing the core functionality and user experience.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main application widget tree, including the MaterialApp, navigation, localization, and event handling.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/card_search/widgets/search_filters.dart",
      "description": "A Flutter widget that provides a user interface for filtering Pokemon cards by type and rarity, enabling users to narrow down their card search with intuitive dropdown menus",
      "class_diagram": "@startuml\nclass SearchFilters {\n  +types: List<String>\n  +rarities: List<String>\n  +selectedType: String?\n  +selectedRarity: String?\n  +onTypeSelected: Function(String?)\n  +onRaritySelected: Function(String?)\n  +build(context: BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the UI for type and rarity filter dropdowns",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "ui/common/app_colors.dart",
        "ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/deck/deck_view.dart",
      "description": "A Flutter view for managing Pok\u00e9mon card decks, allowing users to create, edit, view, and delete decks with detailed card management capabilities",
      "class_diagram": "@startuml\nclass DeckView {\n  -String? deckId\n  +builder(BuildContext, DeckViewModel)\n  +viewModelBuilder(BuildContext)\n  +onViewModelReady(DeckViewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the UI for deck management, displaying deck details, card list, and interaction controls",
          "parameters": [
            "BuildContext",
            "DeckViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates a DeckViewModel instance for managing deck state and operations",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "DeckViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the deck view model when the view is first loaded",
          "parameters": [
            "DeckViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "deck_viewmodel.dart",
        "widgets/card_list_item.dart",
        "widgets/deck_stats.dart",
        "ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/card_search/card_search_view.dart",
      "description": "Provides a comprehensive UI for searching Pok\u00e9mon trading cards with advanced filtering and dynamic result display. Enables users to discover and explore card collections through an interactive search interface.",
      "class_diagram": "@startuml\nclass CardSearchView {\n  +builder(context, viewModel, child)\n  +viewModelBuilder(context)\n  +onViewModelReady(viewModel)\n}\nclass CardSearchViewModel {\n  +searchCards()\n  +updateSearchQuery(query)\n  +updateSelectedType(type)\n  +updateSelectedRarity(rarity)\n  +clearFilters()\n  +navigateToCardDetails(cardId)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the main search view UI with search input, filters, and dynamic results grid",
          "parameters": [
            "context",
            "viewModel",
            "child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the view model instance for managing search state and logic",
          "parameters": [
            "context"
          ],
          "return_type": "CardSearchViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the view model when the view is first created",
          "parameters": [
            "viewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "card_search_viewmodel.dart",
        "search_filters.dart",
        "ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/deck/deck_viewmodel.dart",
      "description": "A ViewModel for managing Pokemon deck operations, providing state management and business logic for creating, editing, deleting, and interacting with decks in a Pokemon card collection application",
      "class_diagram": "@startuml\nclass DeckViewModel {\n  -TextEditingController nameController\n  -TextEditingController descriptionController\n  +Future<void> initialize()\n  +Future<void> saveDeck()\n  +Future<void> deleteDeck()\n  +Future<void> removeCardFromDeck()\n  +void navigateToCardSearch()\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Loads deck details when editing an existing deck, populating text controllers with current deck data",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "saveDeck",
          "description": "Creates or updates a Pokemon deck with validated name and description, persisting changes to repository",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "deleteDeck",
          "description": "Removes a deck after user confirmation, handling deletion through repository",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "removeCardFromDeck",
          "description": "Removes a specific card from the current deck, updating deck state",
          "parameters": [
            "cardId"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "navigateToCardSearch",
          "description": "Navigates user to card search interface for adding cards to deck",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "pokemon_deck/features/deck/deck_repository.dart",
        "stacked_services/stacked_services.dart",
        "uuid/uuid.dart"
      ]
    },
    {
      "name": "lib/features/card_search/card_search_viewmodel.dart",
      "description": "A ViewModel for managing Pok\u00e9mon card search functionality that provides dynamic filtering and search capabilities for users to find specific Pok\u00e9mon cards based on various criteria",
      "class_diagram": "@startuml\nclass CardSearchViewModel {\n  -_pokemonApiService: PokemonApiService\n  -_searchResults: List<PokemonCard>\n  -_types: List<String>\n  -_rarities: List<String>\n  +initialize(): Future<void>\n  +searchCards(): Future<void>\n  +updateSearchQuery(query: String)\n  +updateSelectedType(type: String?)\n  +updateSelectedRarity(rarity: String?)\n  +clearFilters()\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Loads initial filter options like card types and rarities from the Pokemon API",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "searchCards",
          "description": "Performs a search for Pok\u00e9mon cards using user-specified query, type, and rarity filters",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "clearFilters",
          "description": "Resets all search filters and clears the current search results",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "updateSearchQuery",
          "description": "Updates the current search query text",
          "parameters": [
            "query"
          ],
          "return_type": "void"
        },
        {
          "name": "updateSelectedType",
          "description": "Sets the selected Pok\u00e9mon card type filter",
          "parameters": [
            "type"
          ],
          "return_type": "void"
        },
        {
          "name": "updateSelectedRarity",
          "description": "Sets the selected Pok\u00e9mon card rarity filter",
          "parameters": [
            "rarity"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "pokemon_api_service.dart",
        "pokemon_card.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/deck/widgets/card_list_item.dart",
      "description": "A reusable Flutter widget that renders a card list item for a Pokemon card, displaying core card details and providing interactive capabilities like tap and remove actions.",
      "class_diagram": "@startuml\nclass CardListItem {\n  - PokemonCard card\n  - VoidCallback onTap\n  - VoidCallback onRemove\n  + Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs a Card widget with Pokemon card details, thumbnail image, and interaction capabilities",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:pokemon_deck/models/pokemon_card.dart",
        "package:pokemon_deck/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/deck/widgets/deck_stats.dart",
      "description": "A widget that displays statistical insights about a Pok\u00e9mon deck, providing visual analytics around card composition, type distribution, and average HP to help players understand their deck's characteristics",
      "class_diagram": "@startuml\nclass DeckStats {\n  - PokemonDeck deck\n  + build(BuildContext context): Widget\n  - _calculateTypeDistribution(): Map<String, int>\n  - _calculateAverageHP(): double\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders a Card widget displaying comprehensive deck statistics including total cards, average HP, and type distribution",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_calculateTypeDistribution",
          "description": "Analyzes the deck's cards and computes the frequency of each Pok\u00e9mon type, sorted in descending order",
          "parameters": null,
          "return_type": "Map<String, int>"
        },
        {
          "name": "_calculateAverageHP",
          "description": "Calculates the mean hit points across all cards in the deck, handling empty deck scenarios",
          "parameters": null,
          "return_type": "double"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:pokemon_deck/models/pokemon_deck.dart",
        "package:pokemon_deck/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/models/pokemon_card.dart",
      "description": "A data model representing Pok\u00e9mon card details, providing a structured representation of Pok\u00e9mon cards with comprehensive metadata for a Pok\u00e9mon trading card application. It enables parsing, serialization, and management of complex card information.",
      "class_diagram": "@startuml\nclass PokemonCard {\n  +id: String\n  +name: String\n  +imageUrl: String\n  +hp: int\n  +fromJson(): PokemonCard\n  +toJson(): Map<String, dynamic>\n}\nclass Attack {\n  +name: String\n  +damage: String\n  +fromJson(): Attack\n}\nclass Weakness {\n  +type: String\n  +value: String\n}\nclass Resistance {\n  +type: String\n  +value: String\n}\nPokemonCard *-- Attack\nPokemonCard *-- Weakness\nPokemonCard *-- Resistance\n@enduml",
      "methods": [
        {
          "name": "PokemonCard.fromJson",
          "description": "Converts JSON data into a structured PokemonCard object, enabling data parsing from external sources",
          "parameters": [
            "Map<String, dynamic>"
          ],
          "return_type": "PokemonCard"
        },
        {
          "name": "PokemonCard.toJson",
          "description": "Serializes a PokemonCard object back into a JSON-compatible map for storage or transmission",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/models/pokemon_deck.dart",
      "description": "A data model representing a Pokemon card deck, enabling structured organization and management of Pokemon cards with metadata about creation, updates, and deck details",
      "class_diagram": "@startuml\nclass PokemonDeck {\n  +String id\n  +String name\n  +String description\n  +List<PokemonCard> cards\n  +DateTime createdAt\n  +DateTime updatedAt\n  +fromJson(Map<String, dynamic> json)\n  +toJson()\n  +copyWith()\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Creates a PokemonDeck instance from a JSON map, enabling deserialization of deck data",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "PokemonDeck"
        },
        {
          "name": "toJson",
          "description": "Converts the PokemonDeck instance into a JSON-serializable map for storage or transmission",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "copyWith",
          "description": "Creates a new PokemonDeck instance with optional field updates, supporting immutable state management",
          "parameters": [
            "String? id",
            "String? name",
            "String? description",
            "List<PokemonCard>? cards",
            "DateTime? createdAt",
            "DateTime? updatedAt"
          ],
          "return_type": "PokemonDeck"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart",
        "pokemon_deck/models/pokemon_card.dart"
      ]
    },
    {
      "name": "lib/services/pokemon_api_service.dart",
      "description": "A service class that provides comprehensive access to the Pokemon Trading Card Game API, enabling searching, retrieving, and filtering of Pokemon cards with robust error handling and API interaction management.",
      "class_diagram": "@startuml\nclass PokemonApiService {\n  -String baseUrl\n  -String apiKey\n  -http.Client _client\n  +Future<void> init()\n  +Future<List<PokemonCard>> searchCards()\n  +Future<PokemonCard> getCardById()\n  +Future<List<String>> getTypes()\n  +Future<List<String>> getRarities()\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Validates API connection and key, ensuring service is ready for use",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "searchCards",
          "description": "Searches Pokemon cards with flexible filtering options, supporting pagination and multiple search criteria",
          "parameters": [
            "query",
            "types",
            "subtypes",
            "rarity",
            "page",
            "pageSize"
          ],
          "return_type": "Future<List<PokemonCard>>"
        },
        {
          "name": "getCardById",
          "description": "Retrieves a specific Pokemon card by its unique identifier",
          "parameters": [
            "id"
          ],
          "return_type": "Future<PokemonCard>"
        },
        {
          "name": "getTypes",
          "description": "Fetches all available Pokemon card types from the API",
          "parameters": null,
          "return_type": "Future<List<String>>"
        },
        {
          "name": "getRarities",
          "description": "Retrieves all possible Pokemon card rarity levels",
          "parameters": null,
          "return_type": "Future<List<String>>"
        }
      ],
      "dependencies": [
        "dart:convert",
        "package:http/http.dart",
        "package:pokemon_deck/models/pokemon_card.dart",
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/features/deck/deck_repository.dart",
      "description": "A repository for managing Pokemon card decks, providing persistent storage and CRUD operations for deck and card management using SharedPreferences as a local storage mechanism",
      "class_diagram": "@startuml\nclass DeckRepository {\n  -SharedPreferences _prefs\n  +Future<List<PokemonDeck>> getAllDecks()\n  +Future<void> saveDeck(PokemonDeck deck)\n  +Future<void> deleteDeck(String deckId)\n  +Future<void> addCardToDeck(String deckId, PokemonCard card)\n  +Future<void> removeCardFromDeck(String deckId, String cardId)\n}\n@enduml",
      "methods": [
        {
          "name": "getAllDecks",
          "description": "Retrieves all saved Pokemon decks from local storage",
          "parameters": null,
          "return_type": "Future<List<PokemonDeck>>"
        },
        {
          "name": "saveDeck",
          "description": "Saves a new deck or updates an existing deck in local storage",
          "parameters": [
            "PokemonDeck deck"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteDeck",
          "description": "Removes a specific deck from local storage by its ID",
          "parameters": [
            "String deckId"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "addCardToDeck",
          "description": "Adds a Pokemon card to a specific deck and updates its timestamp",
          "parameters": [
            "String deckId",
            "PokemonCard card"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "removeCardFromDeck",
          "description": "Removes a specific card from a deck and updates its timestamp",
          "parameters": [
            "String deckId",
            "String cardId"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "shared_preferences.dart",
        "dart:convert",
        "pokemon_card.dart",
        "pokemon_deck.dart"
      ]
    },
    {
      "name": "lib/features/card_details/card_details_view.dart",
      "description": "A Flutter view for displaying detailed information about a Pok\u00e9mon card, providing a comprehensive and user-friendly interface for viewing card-specific attributes and metadata",
      "class_diagram": "@startuml\nclass CardDetailsView {\n  - cardId: String\n  + builder(context, viewModel)\n  + viewModelBuilder(context)\n  + onViewModelReady(viewModel)\n  - _buildInfoSection()\n  - _buildInfoRow()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the main UI for displaying card details, handling loading, error, and success states",
          "parameters": [
            "BuildContext",
            "CardDetailsViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the associated view model for managing card details data and logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "CardDetailsViewModel"
        },
        {
          "name": "_buildInfoSection",
          "description": "Generates a structured section of information for displaying card details",
          "parameters": [
            "String",
            "List<Widget>"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildInfoRow",
          "description": "Creates a row for displaying a single piece of card information with a label and value",
          "parameters": [
            "String",
            "String"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "pokemon_deck/features/card_details/card_details_viewmodel.dart",
        "pokemon_deck/ui/common/ui_helpers.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/card_details/card_details_viewmodel.dart",
      "description": "A ViewModel responsible for managing the detailed view of a Pokemon card, fetching card data, formatting card attributes, and handling navigation in a Flutter application.",
      "class_diagram": "@startuml\nclass CardDetailsViewModel {\n  -cardId: String\n  -_pokemonApiService: PokemonApiService\n  -_navigationService: NavigationService\n  -_card: PokemonCard\n  +initialize(): Future<void>\n  +navigateBack(): void\n  +getFormattedTypes(): String\n  +getFormattedWeaknesses(): String\n  +getFormattedResistances(): String\n  +getFormattedAttacks(): String\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Fetches the specific Pokemon card details by ID from the API and handles potential loading errors",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "navigateBack",
          "description": "Provides a standard navigation method to return to the previous screen",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "getFormattedTypes",
          "description": "Transforms the card's type information into a user-friendly string representation",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "getFormattedWeaknesses",
          "description": "Converts the card's weakness data into a readable, formatted string",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "getFormattedResistances",
          "description": "Transforms the card's resistance information into a human-readable format",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "getFormattedAttacks",
          "description": "Converts the card's attack details into a comprehensive, formatted string",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "pokemon_api_service.dart",
        "pokemon_card.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant CardSearchView\nparticipant CardSearchViewModel\nparticipant PokemonApiService\nparticipant DeckView\nparticipant DeckRepository\n\nUser -> CardSearchView: Search Cards\nCardSearchView -> CardSearchViewModel: Trigger Search\nCardSearchViewModel -> PokemonApiService: Request Card Data\nPokemonApiService --> CardSearchViewModel: Return Card Results\nCardSearchViewModel --> CardSearchView: Update Search Results\n\nUser -> CardSearchView: Select Card\nCardSearchView -> DeckView: Add to Deck\nDeckView -> DeckRepository: Save Card to Deck\nDeckRepository --> DeckView: Confirm Save\n@enduml",
  "state_management_flow": "Implemented using Stacked ViewModels for each feature, providing reactive state management. ViewModels handle business logic, data fetching, and UI state. Each view has a corresponding ViewModel that manages its specific state, with reactive rebuilds triggered by state changes. Dependency injection via GetIt allows seamless service and repository access across the application.",
  "navigation_flow": "Uses Stacked Router for declarative navigation with predefined routes. Navigation between views (CardSearchView, DeckView, CardDetailsView) is managed through NavigationService. Supports push, replace, and pop navigation strategies. Routes are configured in app.router.dart, enabling type-safe navigation and passing parameters between screens."
}